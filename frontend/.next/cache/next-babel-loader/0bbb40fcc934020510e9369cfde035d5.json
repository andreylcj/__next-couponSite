{"ast":null,"code":"import ConnectDB from '../../../assets/utils/ConnectDB';\nimport bcrypt from 'bcrypt';\nimport Users from '../../../assets/models/UserModel';\nimport validRegister from '../../../assets/utils/ValidRegister';\nimport { useDispatch } from 'react-redux';\nConnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case 'POST':\n      await register(req, res);\n      break;\n  }\n});\n\nconst register = async (req, res) => {\n  const dispatch = useDispatch();\n\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const validate = validRegister(email, password);\n\n    if (validate.emailMessage || validate.passwordMessage) {\n      return res.status(400).json(validate);\n    }\n\n    dispatch({\n      type: 'REGISTER_SUCCESS',\n      payload: {},\n      loading: true\n    });\n    const user = await Users.findOne({\n      email\n    });\n    if (user) return res.status(405).json({\n      emailMessage: 'Esse email j치 est치 cadastrado',\n      status: 405\n    });\n    const passwordHash = await bcrypt.hash(password, 12);\n    const newUser = new Users({\n      email,\n      password: passwordHash\n    });\n    console.log(newUser);\n    await newUser.save();\n    res.json({\n      msg: 'Register Success'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message,\n      status: 500\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Andrey luiz/Desktop/NextJS/next_project/frontend/pages/api/auth/register.js"],"names":["ConnectDB","bcrypt","Users","validRegister","useDispatch","req","res","method","register","dispatch","email","password","body","validate","emailMessage","passwordMessage","status","json","type","payload","loading","user","findOne","passwordHash","hash","newUser","console","log","save","msg","err","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iCAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGAJ,SAAS;AAET,gBAAe,OAAOK,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,MAAL;AACI,YAAMC,QAAQ,CAACH,GAAD,EAAMC,GAAN,CAAd;AACA;AAHR;AAKH,CAND;;AAQA,MAAME,QAAQ,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMG,QAAQ,GAAGL,WAAW,EAA5B;;AACA,MAAI;AACA,UAAM;AAAEM,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBN,GAAG,CAACO,IAAhC;AAEA,UAAMC,QAAQ,GAAGV,aAAa,CAACO,KAAD,EAAQC,QAAR,CAA9B;;AAEA,QAAIE,QAAQ,CAACC,YAAT,IAAyBD,QAAQ,CAACE,eAAtC,EAAuD;AACnD,aAAOT,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,QAArB,CAAP;AACH;;AAEDJ,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,OAAO,EAAE,EAArC;AAAyCC,MAAAA,OAAO,EAAE;AAAlD,KAAD,CAAR;AAEA,UAAMC,IAAI,GAAG,MAAMnB,KAAK,CAACoB,OAAN,CAAc;AAAEZ,MAAAA;AAAF,KAAd,CAAnB;AACA,QAAIW,IAAJ,EAAU,OAAOf,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEH,MAAAA,YAAY,EAAE,+BAAhB;AAAiDE,MAAAA,MAAM,EAAE;AAAzD,KAArB,CAAP;AAEV,UAAMO,YAAY,GAAG,MAAMtB,MAAM,CAACuB,IAAP,CAAYb,QAAZ,EAAsB,EAAtB,CAA3B;AAEA,UAAMc,OAAO,GAAG,IAAIvB,KAAJ,CAAU;AAAEQ,MAAAA,KAAF;AAASC,MAAAA,QAAQ,EAAEY;AAAnB,KAAV,CAAhB;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEA,UAAMA,OAAO,CAACG,IAAR,EAAN;AACAtB,IAAAA,GAAG,CAACW,IAAJ,CAAS;AAAEY,MAAAA,GAAG,EAAE;AAAP,KAAT;AACH,GAtBD,CAsBE,OAAOC,GAAP,EAAY;AACV,WAAOxB,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEa,MAAAA,GAAG,EAAEA,GAAG,CAACC,OAAX;AAAoBf,MAAAA,MAAM,EAAE;AAA5B,KAArB,CAAP;AACH;AACJ,CA3BD","sourcesContent":["import ConnectDB from '../../../assets/utils/ConnectDB'\r\nimport bcrypt from 'bcrypt'\r\nimport Users from '../../../assets/models/UserModel'\r\nimport validRegister from '../../../assets/utils/ValidRegister'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\nConnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch (req.method) {\r\n        case 'POST':\r\n            await register(req, res)\r\n            break\r\n    }\r\n}\r\n\r\nconst register = async (req, res) => {\r\n    const dispatch = useDispatch();\r\n    try {\r\n        const { email, password } = req.body\r\n\r\n        const validate = validRegister(email, password)\r\n\r\n        if (validate.emailMessage || validate.passwordMessage) {\r\n            return res.status(400).json(validate)\r\n        }\r\n\r\n        dispatch({ type: 'REGISTER_SUCCESS', payload: {}, loading: true })\r\n\r\n        const user = await Users.findOne({ email })\r\n        if (user) return res.status(405).json({ emailMessage: 'Esse email j치 est치 cadastrado', status: 405 })\r\n\r\n        const passwordHash = await bcrypt.hash(password, 12)\r\n\r\n        const newUser = new Users({ email, password: passwordHash })\r\n\r\n        console.log(newUser)\r\n\r\n        await newUser.save()\r\n        res.json({ msg: 'Register Success' })\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message, status: 500 })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}