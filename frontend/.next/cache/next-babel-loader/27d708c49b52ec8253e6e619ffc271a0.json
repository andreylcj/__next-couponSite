{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FAIL, REQUEST, SUCCESS } from \"../Constants\";\nimport { postData } from \"../../assets/utils/fetchData\";\nexport var registerAction = function registerAction(apiURL, post) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: REQUEST\n              });\n              _context.prev = 1;\n              _context.next = 4;\n              return postData(apiURL, post);\n\n            case 4:\n              data = _context.sent;\n              dispatch({\n                type: SUCCESS,\n                payload: data.emailMessage\n              });\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch({\n                type: FAIL,\n                payload: _context.t0.message\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/Andrey luiz/Desktop/NextJS/next_project/frontend/redux_store/actions/LoginAction.js"],"names":["FAIL","REQUEST","SUCCESS","postData","registerAction","apiURL","post","dispatch","type","data","payload","emailMessage","message"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,OAAf,EAAwBC,OAAxB,QAAuC,cAAvC;AACA,SAASC,QAAT,QAAyB,8BAAzB;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAASC,IAAT;AAAA;AAAA,wEAAkB,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5CA,cAAAA,QAAQ,CAAC;AACLC,gBAAAA,IAAI,EAAEP;AADD,eAAD,CAAR;AAD4C;AAAA;AAAA,qBAKrBE,QAAQ,CAACE,MAAD,EAASC,IAAT,CALa;;AAAA;AAKlCG,cAAAA,IALkC;AAMxCF,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,IAAI,EAAEN,OAAR;AAAiBQ,gBAAAA,OAAO,EAAED,IAAI,CAACE;AAA/B,eAAD,CAAR;AANwC;AAAA;;AAAA;AAAA;AAAA;AAQxCJ,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,IAAI,EAAER,IAAR;AAAcU,gBAAAA,OAAO,EAAE,YAAME;AAA7B,eAAD,CAAR;;AARwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB","sourcesContent":["import { FAIL, REQUEST, SUCCESS } from \"../Constants\"\r\nimport { postData } from \"../../assets/utils/fetchData\";\r\n\r\nexport const registerAction = (apiURL, post) => async (dispatch) => {\r\n    dispatch({\r\n        type: REQUEST,\r\n    });\r\n    try {\r\n        const data = await postData(apiURL, post);\r\n        dispatch({ type: SUCCESS, payload: data.emailMessage })\r\n    } catch (error) {\r\n        dispatch({ type: FAIL, payload: error.message })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}