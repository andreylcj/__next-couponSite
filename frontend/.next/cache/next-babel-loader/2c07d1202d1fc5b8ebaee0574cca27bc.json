{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Andrey luiz\\\\Desktop\\\\NextJS\\\\next_project\\\\frontend\\\\pages\\\\entrar.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { postData } from '../assets/utils/fetchData';\nimport validRegister from '../assets/utils/ValidRegister';\nimport Loading from '../snnipets/Loading';\n\nfunction Register() {\n  _s();\n\n  var initialState = {\n    email: '',\n    password: ''\n  };\n\n  var _useState = useState(initialState),\n      userData = _useState[0],\n      setUserData = _useState[1];\n\n  var _useState2 = useState({\n    emptyEmailToUse: false,\n    invalidEmailToUse: false,\n    emptyPasswordToUse: false,\n    invalidPasswordToUse: false,\n    setSubmitiIsOk: false\n  }),\n      submitStatus = _useState2[0],\n      setSubmitStatus = _useState2[1];\n\n  var _useState3 = useState(false),\n      emptyEmailToUse = _useState3[0],\n      setEmptyEmail = _useState3[1];\n\n  var _useState4 = useState(false),\n      invalidEmailToUse = _useState4[0],\n      setInvalidEmail = _useState4[1];\n\n  var _useState5 = useState(false),\n      emptyPasswordToUse = _useState5[0],\n      setEmptyPassword = _useState5[1];\n\n  var _useState6 = useState(false),\n      invalidPasswordToUse = _useState6[0],\n      setInvalidPassword = _useState6[1];\n\n  var _useState7 = useState(false),\n      submitIsOk = _useState7[0],\n      setSubmitiIsOk = _useState7[1];\n\n  var email = userData.email,\n      password = userData.password;\n\n  var handleInputChange = function handleInputChange(e) {\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value;\n    setUserData(_objectSpread(_objectSpread({}, userData), {}, _defineProperty({}, name, value)));\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _validRegister, emptyEmail, invalidEmail, emptyPassword, invalidPassword, msg;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _validRegister = validRegister(userData.email, userData.password), emptyEmail = _validRegister.emptyEmail, invalidEmail = _validRegister.invalidEmail, emptyPassword = _validRegister.emptyPassword, invalidPassword = _validRegister.invalidPassword, msg = _validRegister.msg;\n              setSubmitStatus({\n                emptyEmailToUse: emptyEmail,\n                invalidEmailToUse: invalidEmail,\n                emptyPasswordToUse: emptyPassword,\n                invalidPasswordToUse: emptyPassword\n              });\n              setEmptyEmail(emptyEmail);\n              setInvalidEmail(invalidEmail);\n              setEmptyPassword(emptyPassword);\n              setInvalidPassword(invalidPassword);\n\n              if (!msg) {\n                _context.next = 10;\n                break;\n              }\n\n              console.log(msg);\n              return _context.abrupt(\"return\");\n\n            case 10:\n              //console.log(userData)\n              //const res = await postData('/api/auth/register', userData)\n              setSubmitStatus({\n                setSubmitiIsOk: true\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"d-block\",\n      onSubmit: handleSubmit,\n      noValidate: true,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          className: \"d-block\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\" //aria-describedby=\"emailHelp\" \n          ,\n          name: \"email\",\n          onChange: handleInputChange,\n          value: email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), submitStatus.emptyEmailToUse ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Por favor, preencha seu e-mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 33\n        }, this) : submitStatus.invalidEmailToUse ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Por favor, preencha um e-mail v\\xE1lido\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 37\n        }, this) : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          className: \"d-block\",\n          children: \"Senha\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          name: \"password\",\n          onChange: handleInputChange,\n          value: password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), submitStatus.emptyPasswordToUse ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Por favor, defina uma senha\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 33\n        }, this) : submitStatus.invalidPasswordToUse ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A senha deve conter pelo menos 6 caracteres\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 37\n        }, this) : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: submitStatus.submitIsOk ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 37\n          }, this)\n        }, void 0, false) : 'Entrar'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Register, \"I91ijm4LoTn5z/ZJa4RnMF2/sb0=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/Users/Andrey luiz/Desktop/NextJS/next_project/frontend/pages/entrar.js"],"names":["React","useState","postData","validRegister","Loading","Register","initialState","email","password","userData","setUserData","emptyEmailToUse","invalidEmailToUse","emptyPasswordToUse","invalidPasswordToUse","setSubmitiIsOk","submitStatus","setSubmitStatus","setEmptyEmail","setInvalidEmail","setEmptyPassword","setInvalidPassword","submitIsOk","handleInputChange","e","target","name","value","handleSubmit","preventDefault","emptyEmail","invalidEmail","emptyPassword","invalidPassword","msg","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { postData } from '../assets/utils/fetchData'\r\nimport validRegister from '../assets/utils/ValidRegister'\r\nimport Loading from '../snnipets/Loading'\r\n\r\nfunction Register() {\r\n    const initialState = { email: '', password: '' }\r\n    const [userData, setUserData] = useState(initialState)\r\n    const [submitStatus, setSubmitStatus] = useState({\r\n        emptyEmailToUse: false,\r\n        invalidEmailToUse: false,\r\n        emptyPasswordToUse: false,\r\n        invalidPasswordToUse: false,\r\n        setSubmitiIsOk: false,\r\n    })\r\n    const [emptyEmailToUse, setEmptyEmail] = useState(false)\r\n    const [invalidEmailToUse, setInvalidEmail] = useState(false)\r\n    const [emptyPasswordToUse, setEmptyPassword] = useState(false)\r\n    const [invalidPasswordToUse, setInvalidPassword] = useState(false)\r\n    const [submitIsOk, setSubmitiIsOk] = useState(false)\r\n\r\n    const { email, password } = userData\r\n\r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target\r\n        setUserData({ ...userData, [name]: value })\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault()\r\n        const { emptyEmail, invalidEmail, emptyPassword, invalidPassword, msg } = validRegister(userData.email, userData.password)\r\n        setSubmitStatus({\r\n            emptyEmailToUse: emptyEmail,\r\n            invalidEmailToUse: invalidEmail,\r\n            emptyPasswordToUse: emptyPassword,\r\n            invalidPasswordToUse: emptyPassword,\r\n        })\r\n        setEmptyEmail(emptyEmail)\r\n        setInvalidEmail(invalidEmail)\r\n        setEmptyPassword(emptyPassword)\r\n        setInvalidPassword(invalidPassword)\r\n\r\n        if (msg) {\r\n            console.log(msg)\r\n            return\r\n        }\r\n        //console.log(userData)\r\n        //const res = await postData('/api/auth/register', userData)\r\n        setSubmitStatus({\r\n            setSubmitiIsOk: true,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"container text-center p-4\">\r\n            <form className=\"d-block\" onSubmit={handleSubmit} noValidate>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"email\" className=\"d-block\">Email</label>\r\n                    <input type=\"email\" id=\"email\"\r\n                        //aria-describedby=\"emailHelp\" \r\n                        name=\"email\"\r\n                        onChange={handleInputChange} value={email}\r\n                    />\r\n                    {\r\n                        submitStatus.emptyEmailToUse ?\r\n                            (\r\n                                <p>Por favor, preencha seu e-mail</p>\r\n                            ) : submitStatus.invalidEmailToUse ?\r\n                                (\r\n                                    <p>Por favor, preencha um e-mail válido</p>\r\n                                ) :\r\n                                (\r\n                                    ''\r\n                                )\r\n                    }\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"password\" className=\"d-block\">Senha</label>\r\n                    <input type=\"password\" id=\"password\" name=\"password\"\r\n                        onChange={handleInputChange} value={password} />\r\n                    {\r\n                        submitStatus.emptyPasswordToUse ?\r\n                            (\r\n                                <p>Por favor, defina uma senha</p>\r\n                            ) : submitStatus.invalidPasswordToUse ?\r\n                                (\r\n                                    <p>A senha deve conter pelo menos 6 caracteres</p>\r\n                                ) :\r\n                                (\r\n                                    ''\r\n                                )\r\n                    }\r\n                </div>\r\n                <button type=\"submit\">\r\n                    {\r\n                        submitStatus.submitIsOk ?\r\n                            (\r\n                                <>\r\n                                    <Loading />\r\n                                </>\r\n                            ) : (\r\n                                'Entrar'\r\n                            )\r\n                    }\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register\r\n"]},"metadata":{},"sourceType":"module"}