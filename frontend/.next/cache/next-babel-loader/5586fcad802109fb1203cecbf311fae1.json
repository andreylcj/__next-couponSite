{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const userDataActionUpdate = dataUpdate => async dispatch => {\n  dispatch({\n    type: 'UPDATE',\n    payload: dataUpdate\n  });\n};\nexport const userDataReducer = (state = {\n  email: '',\n  password: ''\n}, action) => {\n  switch (action.type) {\n    case 'UPDATE':\n      return {\n        userDate: _objectSpread(_objectSpread({}, state), action.payload)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/Andrey luiz/Desktop/NextJS/next_project/frontend/redux_store/UserData.js"],"names":["userDataActionUpdate","dataUpdate","dispatch","type","payload","userDataReducer","state","email","password","action","userDate"],"mappings":";;;;;;AACA,OAAO,MAAMA,oBAAoB,GAAIC,UAAD,IAAgB,MAAOC,QAAP,IAAoB;AACpEA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA,OAAO,EAAEH;AAFJ,GAAD,CAAR;AAIH,CALM;AAOP,OAAO,MAAMI,eAAe,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,QAAQ,EAAE;AAAvB,CAAT,EAAsCC,MAAtC,KAAiD;AAC5E,UAAQA,MAAM,CAACN,IAAf;AACI,SAAK,QAAL;AACI,aAAO;AACHO,QAAAA,QAAQ,kCACDJ,KADC,GAEDG,MAAM,CAACL,OAFN;AADL,OAAP;;AAMJ;AACI,aAAOE,KAAP;AATR;AAWH,CAZM","sourcesContent":["\r\nexport const userDataActionUpdate = (dataUpdate) => async (dispatch) => {\r\n    dispatch({\r\n        type: 'UPDATE',\r\n        payload: dataUpdate\r\n    });\r\n}\r\n\r\nexport const userDataReducer = (state = { email: '', password: '' }, action) => {\r\n    switch (action.type) {\r\n        case 'UPDATE':\r\n            return {\r\n                userDate: {\r\n                    ...state,\r\n                    ...action.payload,\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}