{"ast":null,"code":"import ConnectDB from '../../../assets/utils/ConnectDB';\nimport validRegister from '../../../assets/utils/ValidRegister';\nimport bcrypt from 'bcrypt';\nimport Users from '../../../assets/models/UserModel';\nConnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case 'POST':\n      await register(req, res);\n      break;\n  }\n});\n\nconst register = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const isValid = validRegister(email, password);\n    if (!isValid) return res.status(400).json(isValid);\n    const user = await Users.findOne({\n      email\n    });\n    if (user) return res.status(400).json({\n      err: 'Esse email j치 est치 cadastrado'\n    });\n    const passwordHash = await bcrypt.hash(password, 12);\n    const newUser = new Users({\n      email,\n      password: passwordHash\n    });\n    console.log(newUser);\n    await newUser.save();\n    res.json({\n      msg: 'Register Success'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Andrey luiz/Desktop/NextJS/next_project/frontend/pages/api/auth/register.js"],"names":["ConnectDB","validRegister","bcrypt","Users","req","res","method","register","email","password","body","isValid","status","json","user","findOne","err","passwordHash","hash","newUser","console","log","save","msg","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iCAAtB;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AAGAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,MAAL;AACI,YAAMC,QAAQ,CAACH,GAAD,EAAMC,GAAN,CAAd;AACA;AAHR;AAKH,CAND;;AAQA,MAAME,QAAQ,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AAEA,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBL,GAAG,CAACM,IAAhC;AACA,UAAMC,OAAO,GAAGV,aAAa,CAACO,KAAD,EAAQC,QAAR,CAA7B;AAEA,QAAI,CAACE,OAAL,EAAc,OAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,OAArB,CAAP;AAEd,UAAMG,IAAI,GAAG,MAAMX,KAAK,CAACY,OAAN,CAAc;AAAEP,MAAAA;AAAF,KAAd,CAAnB;AACA,QAAIM,IAAJ,EAAU,OAAOT,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AAEV,UAAMC,YAAY,GAAG,MAAMf,MAAM,CAACgB,IAAP,CAAYT,QAAZ,EAAsB,EAAtB,CAA3B;AAEA,UAAMU,OAAO,GAAG,IAAIhB,KAAJ,CAAU;AAAEK,MAAAA,KAAF;AAASC,MAAAA,QAAQ,EAAEQ;AAAnB,KAAV,CAAhB;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEA,UAAMA,OAAO,CAACG,IAAR,EAAN;AACAjB,IAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEU,MAAAA,GAAG,EAAE;AAAP,KAAT;AACH,GAlBD,CAkBE,OAAOP,GAAP,EAAY;AACV,WAAOX,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,MAAAA,GAAG,EAAEA,GAAG,CAACQ;AAAX,KAArB,CAAP;AACH;AACJ,CAtBD","sourcesContent":["import ConnectDB from '../../../assets/utils/ConnectDB'\r\nimport validRegister from '../../../assets/utils/ValidRegister'\r\nimport bcrypt from 'bcrypt'\r\nimport Users from '../../../assets/models/UserModel'\r\n\r\n\r\nConnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch (req.method) {\r\n        case 'POST':\r\n            await register(req, res)\r\n            break\r\n    }\r\n}\r\n\r\nconst register = async (req, res) => {\r\n    try {\r\n\r\n        const { email, password } = req.body\r\n        const isValid = validRegister(email, password)\r\n\r\n        if (!isValid) return res.status(400).json(isValid)\r\n\r\n        const user = await Users.findOne({ email })\r\n        if (user) return res.status(400).json({ err: 'Esse email j치 est치 cadastrado' })\r\n\r\n        const passwordHash = await bcrypt.hash(password, 12)\r\n\r\n        const newUser = new Users({ email, password: passwordHash })\r\n\r\n        console.log(newUser)\r\n\r\n        await newUser.save()\r\n        res.json({ msg: 'Register Success' })\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}