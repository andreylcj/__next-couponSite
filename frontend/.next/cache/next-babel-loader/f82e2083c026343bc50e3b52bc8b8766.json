{"ast":null,"code":"const baseURL = process.env.BASE_URL;\nexport const getData = async (url, token) => {\n  if (token) {\n    const res = await fetch(`${baseURL}${url}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': token\n      }\n    });\n  } else {\n    const res = await fetch(`${baseURL}${url}`, {\n      method: 'GET'\n    });\n  }\n\n  const data = await res.json();\n  return data;\n};\nexport const postData = async (url, post, token) => {\n  const res = await fetch(`${baseURL}${url}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token\n    },\n    body: JSON.stringify(post)\n  });\n  const data = await res.json();\n  return data;\n};\nexport const putData = async (url, post, token) => {\n  const res = await fetch(`${baseURL}${url}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token\n    },\n    body: JSON.stringify(post)\n  });\n  const data = await res.json();\n  return data;\n};\nexport const patchData = async (url, post, token) => {\n  const res = await fetch(`${baseURL}/api/${url}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token\n    },\n    body: JSON.stringify(post)\n  });\n  const data = await res.json();\n  return data;\n};\nexport const deleteData = async (url, token) => {\n  const res = await fetch(`${baseURL}/api/${url}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token\n    }\n  });\n  const data = await res.json();\n  return data;\n};","map":{"version":3,"sources":["C:/Users/Andrey luiz/Desktop/NextJS/next_project/frontend/assets/utils/fetchData.js"],"names":["baseURL","process","env","BASE_URL","getData","url","token","res","fetch","method","headers","data","json","postData","post","body","JSON","stringify","putData","patchData","deleteData"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAA5B;AAEA,OAAO,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAYC,KAAZ,KAAsB;AACzC,MAAIA,KAAJ,EAAW;AACP,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAER,OAAQ,GAAEK,GAAI,EAAlB,EAAqB;AACxCI,MAAAA,MAAM,EAAE,KADgC;AAExCC,MAAAA,OAAO,EAAE;AACL,yBAAiBJ;AADZ;AAF+B,KAArB,CAAvB;AAMH,GAPD,MAOO;AACH,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAER,OAAQ,GAAEK,GAAI,EAAlB,EAAqB;AACxCI,MAAAA,MAAM,EAAE;AADgC,KAArB,CAAvB;AAGH;;AAGD,QAAME,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACA,SAAOD,IAAP;AACH,CAjBM;AAmBP,OAAO,MAAME,QAAQ,GAAG,OAAOR,GAAP,EAAYS,IAAZ,EAAkBR,KAAlB,KAA4B;AAChD,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAER,OAAQ,GAAEK,GAAI,EAAlB,EAAqB;AACxCI,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAiBJ;AAFZ,KAF+B;AAMxCS,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf;AANkC,GAArB,CAAvB;AASA,QAAMH,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACA,SAAOD,IAAP;AACH,CAZM;AAcP,OAAO,MAAMO,OAAO,GAAG,OAAOb,GAAP,EAAYS,IAAZ,EAAkBR,KAAlB,KAA4B;AAC/C,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAER,OAAQ,GAAEK,GAAI,EAAlB,EAAqB;AACxCI,IAAAA,MAAM,EAAE,KADgC;AAExCC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAiBJ;AAFZ,KAF+B;AAMxCS,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf;AANkC,GAArB,CAAvB;AASA,QAAMH,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACA,SAAOD,IAAP;AACH,CAZM;AAcP,OAAO,MAAMQ,SAAS,GAAG,OAAOd,GAAP,EAAYS,IAAZ,EAAkBR,KAAlB,KAA4B;AACjD,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAER,OAAQ,QAAOK,GAAI,EAAvB,EAA0B;AAC7CI,IAAAA,MAAM,EAAE,OADqC;AAE7CC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAiBJ;AAFZ,KAFoC;AAM7CS,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf;AANuC,GAA1B,CAAvB;AASA,QAAMH,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACA,SAAOD,IAAP;AACH,CAZM;AAcP,OAAO,MAAMS,UAAU,GAAG,OAAOf,GAAP,EAAYC,KAAZ,KAAsB;AAC5C,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAER,OAAQ,QAAOK,GAAI,EAAvB,EAA0B;AAC7CI,IAAAA,MAAM,EAAE,QADqC;AAE7CC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAiBJ;AAFZ;AAFoC,GAA1B,CAAvB;AAQA,QAAMK,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACA,SAAOD,IAAP;AACH,CAXM","sourcesContent":["const baseURL = process.env.BASE_URL\r\n\r\nexport const getData = async (url, token) => {\r\n    if (token) {\r\n        const res = await fetch(`${baseURL}${url}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': token,\r\n            }\r\n        })\r\n    } else {\r\n        const res = await fetch(`${baseURL}${url}`, {\r\n            method: 'GET',\r\n        })\r\n    }\r\n\r\n\r\n    const data = await res.json();\r\n    return data\r\n}\r\n\r\nexport const postData = async (url, post, token) => {\r\n    const res = await fetch(`${baseURL}${url}`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': token\r\n        },\r\n        body: JSON.stringify(post)\r\n    })\r\n\r\n    const data = await res.json();\r\n    return data\r\n}\r\n\r\nexport const putData = async (url, post, token) => {\r\n    const res = await fetch(`${baseURL}${url}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': token\r\n        },\r\n        body: JSON.stringify(post)\r\n    })\r\n\r\n    const data = await res.json();\r\n    return data\r\n}\r\n\r\nexport const patchData = async (url, post, token) => {\r\n    const res = await fetch(`${baseURL}/api/${url}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': token\r\n        },\r\n        body: JSON.stringify(post)\r\n    })\r\n\r\n    const data = await res.json();\r\n    return data\r\n}\r\n\r\nexport const deleteData = async (url, token) => {\r\n    const res = await fetch(`${baseURL}/api/${url}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': token\r\n        }\r\n    })\r\n\r\n    const data = await res.json();\r\n    return data\r\n}"]},"metadata":{},"sourceType":"module"}