{"ast":null,"code":"import ConnectDB from '../../../assets/utils/ConnectDB';\nimport bcrypt from 'bcrypt';\nimport Users from '../../../assets/models/UserModel';\nimport validRegister from '../../../assets/utils/ValidRegister';\nConnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case 'POST':\n      await register(req, res);\n      break;\n  }\n});\n\nconst register = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const validate = validRegister(email, password);\n    console.log(validate);\n\n    if (validate.emailMessage || validate.passwordMessage) {\n      return validate;\n    }\n\n    const user = await Users.findOne({\n      email\n    });\n    if (user) return res.status(400).json({\n      emailMessage: 'Esse email j치 est치 cadastrado',\n      status: 400\n    });\n    const passwordHash = await bcrypt.hash(password, 12);\n    const newUser = new Users({\n      email,\n      password: passwordHash\n    });\n    console.log(newUser);\n    await newUser.save();\n    res.json({\n      msg: 'Register Success'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message,\n      status: 500\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Andrey luiz/Desktop/NextJS/next_project/frontend/pages/api/auth/register.js"],"names":["ConnectDB","bcrypt","Users","validRegister","req","res","method","register","email","password","body","validate","console","log","emailMessage","passwordMessage","user","findOne","status","json","passwordHash","hash","newUser","save","msg","err","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iCAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAGAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,MAAL;AACI,YAAMC,QAAQ,CAACH,GAAD,EAAMC,GAAN,CAAd;AACA;AAHR;AAKH,CAND;;AAQA,MAAME,QAAQ,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AAEA,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBL,GAAG,CAACM,IAAhC;AAEA,UAAMC,QAAQ,GAAGR,aAAa,CAACK,KAAD,EAAQC,QAAR,CAA9B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,QAAIA,QAAQ,CAACG,YAAT,IAAyBH,QAAQ,CAACI,eAAtC,EAAuD;AACnD,aAAOJ,QAAP;AACH;;AAED,UAAMK,IAAI,GAAG,MAAMd,KAAK,CAACe,OAAN,CAAc;AAAET,MAAAA;AAAF,KAAd,CAAnB;AACA,QAAIQ,IAAJ,EAAU,OAAOX,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,MAAAA,YAAY,EAAE,+BAAhB;AAAiDI,MAAAA,MAAM,EAAE;AAAzD,KAArB,CAAP;AAEV,UAAME,YAAY,GAAG,MAAMnB,MAAM,CAACoB,IAAP,CAAYZ,QAAZ,EAAsB,EAAtB,CAA3B;AAEA,UAAMa,OAAO,GAAG,IAAIpB,KAAJ,CAAU;AAAEM,MAAAA,KAAF;AAASC,MAAAA,QAAQ,EAAEW;AAAnB,KAAV,CAAhB;AAEAR,IAAAA,OAAO,CAACC,GAAR,CAAYS,OAAZ;AAEA,UAAMA,OAAO,CAACC,IAAR,EAAN;AACAlB,IAAAA,GAAG,CAACc,IAAJ,CAAS;AAAEK,MAAAA,GAAG,EAAE;AAAP,KAAT;AACH,GArBD,CAqBE,OAAOC,GAAP,EAAY;AACV,WAAOpB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEM,MAAAA,GAAG,EAAEA,GAAG,CAACC,OAAX;AAAoBR,MAAAA,MAAM,EAAE;AAA5B,KAArB,CAAP;AACH;AACJ,CAzBD","sourcesContent":["import ConnectDB from '../../../assets/utils/ConnectDB'\r\nimport bcrypt from 'bcrypt'\r\nimport Users from '../../../assets/models/UserModel'\r\nimport validRegister from '../../../assets/utils/ValidRegister'\r\n\r\n\r\nConnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch (req.method) {\r\n        case 'POST':\r\n            await register(req, res)\r\n            break\r\n    }\r\n}\r\n\r\nconst register = async (req, res) => {\r\n    try {\r\n\r\n        const { email, password } = req.body\r\n\r\n        const validate = validRegister(email, password)\r\n        console.log(validate)\r\n        if (validate.emailMessage || validate.passwordMessage) {\r\n            return validate\r\n        }\r\n\r\n        const user = await Users.findOne({ email })\r\n        if (user) return res.status(400).json({ emailMessage: 'Esse email j치 est치 cadastrado', status: 400 })\r\n\r\n        const passwordHash = await bcrypt.hash(password, 12)\r\n\r\n        const newUser = new Users({ email, password: passwordHash })\r\n\r\n        console.log(newUser)\r\n\r\n        await newUser.save()\r\n        res.json({ msg: 'Register Success' })\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message, status: 500 })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}